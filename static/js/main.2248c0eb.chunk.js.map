{"version":3,"sources":["components/box.js","components/col.js","components/dot.js","components/horizonContainer.js","components/row.js","components/verticalContainer.js","helper/functions.js","pages/game.js","pages/home.js","pages/win.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","className","id","style","Col","cols","Dot","HorizContainer","data-coord","dataCoord","onClick","e","handleClickFilline","onMouseEnter","onHoverLine","lineCoordinates","turn","onMouseLeave","onLeaveLine","backgroundColor","selectColor","Math","floor","indexI","indexJ","Row","row","VerticalContainer","player","event","target","dataset","coord","checkSquare","j","k","boardSize","abs","parseFloat","makeBoard","fillLine","boxColors","i","push","Game","useState","numPlayerOne","setnumPlayerOne","numPlayerTwo","setnumPlayerTwo","setboardSize","setturn","setlineCoordinates","setboxColors","history","useHistory","useEffect","location","state","gameSize","prevlineCoordinates","pow","message","makeWinMessage","pathname","incrementsScore","newBoxColors","prevState","currentCoord","newState","splitCoord","split","madeSquare","Home","setGameSize","type","value","onChange","alert","Win","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2248c0eb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Box = (props) => {\r\n  return (\r\n    <div className={props.className} id={props.id} style={props.style}></div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Col = (props) => {\r\n  return <div id=\"game-board\">{props.cols}</div>;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Dot = (props) => {\r\n  return <div className={props.className} id={props.id}></div>;\r\n};\r\n","import React from \"react\";\r\nimport { selectColor, onHoverLine, onLeaveLine } from \"../helper/functions\";\r\n\r\nexport const HorizContainer = (props) => {\r\n  return (\r\n    <div\r\n      className={props.className}\r\n      id={props.id}\r\n      data-coord={props.dataCoord}\r\n      onClick={(e) => props.handleClickFilline(e)}\r\n      onMouseEnter={(e) => onHoverLine(e, props.lineCoordinates, props.turn)}\r\n      onMouseLeave={(e) => onLeaveLine(e, props.lineCoordinates)}\r\n      style={{\r\n        backgroundColor: selectColor(\r\n          props.lineCoordinates[\r\n            \"0,\" +\r\n              Math.floor(props.indexI / 2) +\r\n              \",\" +\r\n              Math.floor(props.indexJ / 2)\r\n          ]\r\n        ),\r\n      }}\r\n    >\r\n      {\" \"}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Row = (props) => {\r\n  return <div className={\"row\"}>{props.row}</div>;\r\n};\r\n","import React from \"react\";\r\nimport { selectColor, onHoverLine, onLeaveLine } from \"../helper/functions\";\r\n\r\nexport const VerticalContainer = (props) => {\r\n  return (\r\n    <div\r\n      className={props.className}\r\n      id={props.id}\r\n      data-coord={props.dataCoord}\r\n      onClick={(e) => props.handleClickFilline(e)}\r\n      onMouseEnter={(e) => onHoverLine(e, props.lineCoordinates, props.turn)}\r\n      onMouseLeave={(e) => onLeaveLine(e, props.lineCoordinates)}\r\n      style={{\r\n        backgroundColor: selectColor(\r\n          props.lineCoordinates[\r\n            \"1,\" +\r\n              Math.floor(props.indexJ / 2) +\r\n              \",\" +\r\n              Math.floor(props.indexI / 2)\r\n          ]\r\n        ),\r\n      }}\r\n    >\r\n      {\" \"}\r\n    </div>\r\n  );\r\n};\r\n","import { Box } from \"../components/box\";\r\nimport { Col } from \"../components/col\";\r\nimport { Dot } from \"../components/dot\";\r\nimport { HorizContainer } from \"../components/horizonContainer\";\r\nimport { Row } from \"../components/row\";\r\nimport { VerticalContainer } from \"../components/verticalContainer\";\r\n\r\n/**\r\n * Check player color\r\n * @param {Number} player\r\n * @returns\r\n */\r\nexport const selectColor = (player) => {\r\n  if (player === 0) {\r\n    return \"rgb(255,255,255)\";\r\n  } else if (player === 1) {\r\n    return \"#d2691e\";\r\n  } else if (player === -1) {\r\n    return \"#aa07ff\";\r\n  }\r\n};\r\n\r\n/**\r\n * change line color with the turn color\r\n * @param {Object} event\r\n * @param {Object} lineCoordinates\r\n * @param {String} turn\r\n */\r\nexport const onHoverLine = (event, lineCoordinates, turn) => {\r\n  let currentCoord = event.target.dataset.coord;\r\n  if (lineCoordinates[currentCoord] === 0) {\r\n    turn === \"player1\"\r\n      ? (event.target.style.backgroundColor = \"rgba(210,105,30,0.5)\")\r\n      : (event.target.style.backgroundColor = \"rgba(170,7,255,0.5)\");\r\n  }\r\n};\r\n/**\r\n * remove line color\r\n * @param {Object} event\r\n * @param {Object} lineCoordinates\r\n */\r\nexport const onLeaveLine = (event, lineCoordinates) => {\r\n  let currentCoord = event.target.dataset.coord;\r\n  if (lineCoordinates[currentCoord] === 0)\r\n    event.target.style.backgroundColor = \"rgb(255,255,255)\";\r\n};\r\n\r\n/**\r\n * checkSquare function\r\n * indicate if we can form a box with the current line selected\r\n * if it returns 4 that means that the diffrent border of the current box are drawed\r\n * else the box is not complete yet\r\n * @param {Number} j\r\n * @param {Number} k\r\n * @param {Object} lineCoordinates\r\n * @param {Number} boardSize\r\n * @returns\r\n */\r\nexport const checkSquare = (j, k, lineCoordinates, boardSize) => {\r\n  // get the abs of lineCoordinates[0, j, k]\r\n  let checker1 = Math.abs(lineCoordinates[\"0,\" + j + \",\" + k]);\r\n  // get the abs of lineCoordinates[0, j+1, K], or 0 if j+1 > bordSize\r\n  let checker2 = Math.abs(\r\n    parseFloat(j) + 1 > boardSize\r\n      ? 0\r\n      : lineCoordinates[\"0,\" + (parseFloat(j) + 1) + \",\" + k]\r\n  );\r\n  // get the abs of lineCoordinates[1, k, j]\r\n  let checker3 = Math.abs(lineCoordinates[\"1,\" + k + \",\" + j]);\r\n  // get the abs of lineCoordinates[1, k+1, j], or 0 if k+1 > borderSize\r\n  let checker4 = Math.abs(\r\n    parseFloat(k) + 1 > boardSize\r\n      ? 0\r\n      : lineCoordinates[\"1,\" + (parseFloat(k) + 1) + \",\" + j]\r\n  );\r\n  // return the sum of the checkers\r\n  return checker1 + checker2 + checker3 + checker4;\r\n};\r\n\r\n/**\r\n *\r\n * @param {Number} numPlayerOne\r\n * @param {Number} numPlayerTwo\r\n * @returns\r\n */\r\nexport const makeWinMessage = (numPlayerOne, numPlayerTwo) => {\r\n  let winMessage;\r\n  if (numPlayerOne > numPlayerTwo) {\r\n    winMessage = \"Player 1 as Brown color wins!\";\r\n  } else if (numPlayerOne < numPlayerTwo) {\r\n    winMessage = \"Player 2 as Purple color wins!\";\r\n  } else {\r\n    winMessage = \"Draw! Select a board size to start a new game.\";\r\n  }\r\n  return winMessage;\r\n};\r\n\r\n/**\r\n *\r\n * @param {Number} boardSize\r\n * @param {Function} fillLine\r\n * @param {Object} lineCoordinates\r\n * @param {String} turn\r\n * @param {Object} boxColors\r\n * @returns\r\n */\r\nexport const makeBoard = (\r\n  boardSize,\r\n  fillLine,\r\n  lineCoordinates,\r\n  turn,\r\n  boxColors\r\n) => {\r\n  /**\r\n   * set cols as empty array\r\n   */\r\n  let cols = [];\r\n  /**\r\n   * loop from i === 0 to i <= boardSize * 2 (example from 0 to 10)\r\n   */\r\n  for (let i = 0; i <= 2 * boardSize; i++) {\r\n    /**\r\n     * set row as empty array\r\n     */\r\n    let row = [];\r\n    /**\r\n     * loop from j = 0 to j <= boardSize * 2 (example from 0 to 10)\r\n     */\r\n    for (let j = 0; j <= 2 * boardSize; j++) {\r\n      /**\r\n       * check i\r\n       */\r\n      if (i % 2 === 0) {\r\n        /**\r\n         * case i is an even number\r\n         * check j\r\n         */\r\n        if (j % 2 === 0) {\r\n          /**\r\n           * case j is an even number\r\n           * draw dot\r\n           */\r\n          row.push(\r\n            <Dot\r\n              className={\"dot\"}\r\n              id={\"dot\" + Math.floor(i / 2) + \",\" + Math.floor(j / 2)}\r\n            />\r\n          );\r\n        } else {\r\n          /**\r\n           * case j is an odd number\r\n           * draw horizContainer\r\n           */\r\n          row.push(\r\n            <HorizContainer\r\n              className={\"horizContainer\"}\r\n              dataCoord={\"0,\" + Math.floor(i / 2) + \",\" + Math.floor(j / 2)}\r\n              id={\"dot\" + Math.floor(i / 2) + \",\" + Math.floor(j / 2)}\r\n              handleClickFilline={fillLine}\r\n              lineCoordinates={lineCoordinates}\r\n              indexI={i}\r\n              indexJ={j}\r\n              turn={turn}\r\n            />\r\n          );\r\n        }\r\n      } else {\r\n        /**\r\n         * case is is odd number\r\n         * check j\r\n         */\r\n        if (j % 2 === 0) {\r\n          /**\r\n           * case j is an even number\r\n           * draw vertContainer\r\n           */\r\n          row.push(\r\n            <VerticalContainer\r\n              className={\"vertContainer\"}\r\n              dataCoord={\"1,\" + Math.floor(j / 2) + \",\" + Math.floor(i / 2)}\r\n              id={\"dot\" + Math.floor(i / 2) + \",\" + Math.floor(j / 2)}\r\n              handleClickFilline={fillLine}\r\n              indexI={i}\r\n              indexJ={j}\r\n              lineCoordinates={lineCoordinates}\r\n              turn={turn}\r\n            />\r\n          );\r\n        } else {\r\n          /**\r\n           * case j is an odd number\r\n           * draw a box\r\n           */\r\n          row.push(\r\n            <Box\r\n              className={\"box\"}\r\n              id={\"box\" + Math.floor(i / 2) + \",\" + Math.floor(j / 2)}\r\n              style={{\r\n                backgroundColor:\r\n                  boxColors[Math.floor(i / 2) + \",\" + Math.floor(j / 2)],\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    }\r\n    cols.push(<Row row={row} />);\r\n  }\r\n  return <Col cols={cols} />;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport \"../css/game.css\";\r\nimport { checkSquare, makeBoard, makeWinMessage } from \"../helper/functions\";\r\n\r\nconst Game = () => {\r\n  //Set State for our App\r\n  const [numPlayerOne, setnumPlayerOne] = useState(0);\r\n  const [numPlayerTwo, setnumPlayerTwo] = useState(0);\r\n  const [boardSize, setboardSize] = useState(2);\r\n  const [turn, setturn] = useState(\"player1\");\r\n  const [lineCoordinates, setlineCoordinates] = useState({});\r\n  const [boxColors, setboxColors] = useState({});\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setboardSize(history.location.state.gameSize);\r\n    // Fill the matrix initially with value of 0 => Set lineCoordinates object\r\n    // First loop increments i to i== 0 then i == 1\r\n    // Second loop increments j, from j == o to j == borderSize     ( exemple : 0 to 5)\r\n    // Third loop  increments k, from k == 0 to K == broderSize - 1 ( exemple : 0 to 4)\r\n    for (let i = 0; i < 2; i++) {\r\n      for (let j = 0; j < boardSize + 1; j++) {\r\n        for (let k = 0; k < boardSize; k++) {\r\n          setlineCoordinates((prevlineCoordinates) => ({\r\n            ...prevlineCoordinates,\r\n            [i + \",\" + j + \",\" + k]: 0,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n    // Fill the boxes in the matrix initially with string value of rgd color => Set boxColors object\r\n    // First loop increments i from i === 0 to i === borderSize -1 (example i: 0 to 4)\r\n    // Secend loop incremets j from j === 0 to j === broderSize -1  (example j: 0 to 4)\r\n    for (let i = 0; i < boardSize; i++) {\r\n      for (let j = 0; j < boardSize; j++) {\r\n        boxColors[i + \",\" + j] = \"rgb(120,255,255)\";\r\n      }\r\n    }\r\n  }, [boardSize, boxColors]);\r\n  /**\r\n   * Check if game finished or not\r\n   */\r\n  useEffect(() => {\r\n    if (numPlayerOne + numPlayerTwo === Math.pow(boardSize, 2)) {\r\n      const message = makeWinMessage(numPlayerOne, numPlayerTwo);\r\n      history.push({ pathname: \"/win\", state: { message } });\r\n    }\r\n  }, [numPlayerOne, numPlayerTwo]);\r\n\r\n  /**\r\n   * function add a line\r\n   * @param {*} event\r\n   */\r\n  const fillLine = (event) => {\r\n    /**\r\n     * onClick set CurrentCoodinate // 0,0,0, // 1,0,0 ....\r\n     */\r\n    let currentCoord = event.target.dataset.coord;\r\n    /**\r\n     * if lineCoordinates value of the currentCoord  equal 0\r\n     */\r\n    if (lineCoordinates[currentCoord] === 0) {\r\n      /**\r\n       * event.target.style.backgroundColor =  this.state.turn\r\n       * Set the app state with new lineCoordinates\r\n       * Toggle lineCoordinates value with 1 if the old one is player 1  or -1 if it was player 2\r\n       */\r\n      let newState = lineCoordinates;\r\n      newState[currentCoord] = turn === \"player1\" ? 1 : -1;\r\n      setlineCoordinates(newState);\r\n      /**\r\n       * Split the currentCoord into i, j, k variables\r\n       */\r\n      let splitCoord = currentCoord.split(\",\");\r\n      let [i, j, k] = splitCoord;\r\n      /**\r\n       * set newBoxColor variable with app state boxColor\r\n       */\r\n      let newBoxColors = boxColors;\r\n      /**\r\n       * set madeSquare variable to 0\r\n       */\r\n      let madeSquare = 0;\r\n      /**\r\n       * Check the i value\r\n       * case i === 0 ==> Horizontal  line drawed\r\n       */\r\n      if (i === \"0\") {\r\n        /**\r\n         * check if we made a square with the current j,k values\r\n         * line drawed is the top border of the box\r\n         */\r\n        if (checkSquare(j, k, lineCoordinates, boardSize) === 4) {\r\n          /**\r\n           * update madeSquare value to 1\r\n           */\r\n          madeSquare = 1;\r\n          /**\r\n           *  Set the newBoxColor[j,k] with the same color of the turnColor (if turnColor === brown => make brown square)\r\n           */\r\n          newBoxColors[j + \",\" + k] =\r\n            turn === \"player1\" ? \"rgba(210,105,30,0.5)\" : \"rgba(170,7,255,0.5)\";\r\n          /**\r\n           * Set app state with the new box color\r\n           * upgrage numPlayerOne + 1 if the previous color was brown OR upgrade numPlayerTwo + 1 if the privious color was violet\r\n           */\r\n          incrementsScore(newBoxColors);\r\n        }\r\n        /**\r\n         * check if we made a square with the current j-1, k values\r\n         *  line drawed is the bottom  border of the box\r\n         */\r\n        if (\r\n          checkSquare(parseFloat(j) - 1, k, lineCoordinates, boardSize) === 4\r\n        ) {\r\n          /**\r\n           * update madeSquare value to 1\r\n           */\r\n          madeSquare = 1;\r\n          /**\r\n           * Set the newBoxColor[j-1, k] with the same color of the turnColor (if turnColor === red => make red square)\r\n           */\r\n          newBoxColors[parseFloat(j) - 1 + \",\" + k] =\r\n            turn === \"player1\" ? \"rgba(210,105,30,0.5)\" : \"rgba(170,7,255,0.5)\";\r\n\r\n          /**\r\n           * Set app state with the new box color\r\n           * upgrage numPlayerOne + 1 if the previous color was brown OR upgrade numPlayerTwo + 1 if the privious color was violet\r\n           */\r\n          incrementsScore(newBoxColors);\r\n        }\r\n      } else {\r\n        /**\r\n         * case i != 0 ==> Vertical line drawed\r\n         */\r\n        // check if we made a square with the current k,j values\r\n        if (checkSquare(k, j, lineCoordinates, boardSize) === 4) {\r\n          /**\r\n           * update madeSquare value to 1\r\n           */\r\n          madeSquare = 1;\r\n          /**\r\n           * Set the newBoxColor[k, j] with the same color of the turnColor (if turnColor === player 1  => make brown square)\r\n           */\r\n          newBoxColors[k + \",\" + j] =\r\n            turn === \"player1\" ? \"rgba(210,105,30,0.5)\" : \"rgba(170,07255,0.5)\";\r\n          incrementsScore(newBoxColors);\r\n        }\r\n        /**\r\n         *  check if we made a square with the current k,j-1 values\r\n         */\r\n        if (\r\n          checkSquare(k, parseFloat(j) - 1, lineCoordinates, boardSize) === 4\r\n        ) {\r\n          /**\r\n           * // update madeSquare value to 1\r\n           */\r\n          madeSquare = 1;\r\n\r\n          /**\r\n           * // Set the newBoxColor[k, j-1] with the same color of the turnColor (if turnColor === player 1 => make brown square)\r\n           */\r\n          newBoxColors[k + \",\" + (parseFloat(j) - 1)] =\r\n            turn === \"player1\" ? \"rgba(210,105,30,0.5)\" : \"rgba(170,07255,0.5)\";\r\n          incrementsScore(newBoxColors);\r\n        }\r\n      }\r\n      // if madeSquare === 0 toggle turn color\r\n      if (madeSquare === 0) {\r\n        setturn(turn === \"player1\" ? \"player2\" : \"player1\");\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * increment score of player and setbox color\r\n   * @param {Object} newBoxColors\r\n   */\r\n  const incrementsScore = (newBoxColors) => {\r\n    if (turn === \"player1\") setnumPlayerOne((prevState) => prevState + 1);\r\n    if (turn === \"player2\") setnumPlayerTwo((prevState) => prevState + 1);\r\n    setboxColors(newBoxColors);\r\n  };\r\n\r\n  return (\r\n    <div id=\"game\">\r\n      <div id=\"header\">\r\n        <p id=\"score\">Player Brown :{numPlayerOne}</p>\r\n        <p id=\"score\">Player Purple :{numPlayerTwo}</p>\r\n      </div>\r\n      <div id=\"board\">\r\n        {makeBoard(boardSize, fillLine, lineCoordinates, turn, boxColors)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/home.css\";\r\n\r\nexport const Home = () => {\r\n  const [gameSize, setGameSize] = useState(0);\r\n  const history = useHistory();\r\n  const handleClick = () => {\r\n    if (gameSize < 2 || gameSize > 8) {\r\n      alert(\"Game size should be between 2 and 7\");\r\n    } else {\r\n      history.push({ pathname: \"/game\", state: { gameSize } });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h5>PLease fill in the field to start a new game</h5>\r\n      <input\r\n        type=\"number\"\r\n        value={gameSize}\r\n        onChange={(e) => setGameSize(e.target.value)}\r\n      />\r\n      <button onClick={handleClick}>Start Game</button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport \"../css/win.css\";\r\nexport const Win = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div id=\"win\" className=\"winText\">\r\n      <h4>\r\n        {history?.location?.state?.message\r\n          ? history?.location?.state?.message\r\n          : \"null\"}\r\n      </h4>\r\n      <button\r\n        onClick={() => {\r\n          history.push(\"/\");\r\n        }}\r\n      >\r\n        Start a new game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./css/App.css\";\nimport Game from \"./pages/game\";\nimport { Home } from \"./pages/home\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Win } from \"./pages/win\";\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <div>\n        <h1 className=\"welcome\">Dots &amp; Boxes </h1>\n        <Switch>\n          <Route path=\"/win\" exact component={Win} />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/game\" exact component={Game} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom/cjs/react-router-dom.min\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}